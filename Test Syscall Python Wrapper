import drl

def test_drl_update_prob():
    prob = 50
    result = drl.drl_update_prob(prob)
    print(f"Test drl_update_prob with input {prob}: Result = {result}")
    assert result == prob + 1, f"Expected {prob + 1}, but got {result}"
    print("drl_update_prob test passed.")

def test_drl_get_buffer():
    result, data, size = drl.drl_get_buffer()
    print(f"Test drl_get_buffer: Result = {result}, Size = {size}")
    print("Data structure contents:")
    for key, value in data.items():
        print(f"{key}: {value}")
    
    # Assuming the dummy implementation in drl_get_buffer sets the data structure as shown previously
    assert result == 0, f"Expected 0, but got {result}"
    assert size == 88, f"Expected 88, but got {size}"  # 22 fields * 4 bytes each (assuming packing)
    
    # Verify some of the expected values based on the dummy implementation
    assert data['flows_cnt'] == 10, f"Expected flows_cnt to be 10, but got {data['flows_cnt']}"
    assert data['limit'] == 100, f"Expected limit to be 100, but got {data['limit']}"
    assert data['tot_pkts'] == 1000, f"Expected tot_pkts to be 1000, but got {data['tot_pkts']}"
    
    print("drl_get_buffer test passed.")

def main():
    test_drl_update_prob()
    test_drl_get_buffer()
    print("All tests passed.")

if __name__ == "__main__":
    main()
